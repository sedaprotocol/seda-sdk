// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/fast/v1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { FastClient, FastUser, Params } from "./fast";

/** The request message for QueryFastClient RPC method. */
export interface QueryFastClientRequest {
  /** A hex encoded string of the public key of the fast client. */
  fastClientPubKey: string;
}

/** The response message for QueryFastClient RPC method. */
export interface QueryFastClientResponse {
  client: FastClient | undefined;
}

/** The request message for QueryFastClientTransfer RPC method. */
export interface QueryFastClientTransferRequest {
  /** A hex encoded string of the public key of the fast client. */
  fastClientPubKey: string;
}

/** The response message for QueryFastClientTransfer RPC method. */
export interface QueryFastClientTransferResponse {
  newOwnerAddress: string;
}

/** The request message for QueryFastClientUsers RPC method. */
export interface QueryFastClientUsersRequest {
  /** A hex encoded string of the public key of the fast client. */
  fastClientPubKey: string;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/** The response message for QueryFastClientUsers RPC method. */
export interface QueryFastClientUsersResponse {
  /** users are the users of the fast client of the given fast_client_pub_key. */
  users: FastUser[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/** The request message for QueryFastClientUser RPC method. */
export interface QueryFastClientUserRequest {
  /** A hex encoded string of the public key of the fast client. */
  fastClientPubKey: string;
  /** the unique id of the user. */
  userId: string;
}

/** The response message for QueryFastClientUser RPC method. */
export interface QueryFastClientUserResponse {
  user: FastUser | undefined;
}

/** The request message for QueryFastClientEligibility RPC method. */
export interface QueryFastClientEligibilityRequest {
  /**
   * A base64 encoded string of the payload of the fast client.
   * Should be in the following format:
   * "{blockNumber}:{userId}:{signature(blocknumber_be_uint64,
   * keccak256(userId_utf8_bytes), chainId_utf8_bytes)_hex_string}"
   */
  payload: string;
}

/** The response message for QueryFastClientEligibility RPC method. */
export interface QueryFastClientEligibilityResponse {
  eligible: boolean;
  userCredits: string;
  blockHeight: bigint;
}

/** The request message for QueryParams RPC method. */
export interface QueryParamsRequest {
}

/** The response message for QueryParams RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params: Params | undefined;
}

function createBaseQueryFastClientRequest(): QueryFastClientRequest {
  return { fastClientPubKey: "" };
}

export const QueryFastClientRequest = {
  encode(message: QueryFastClientRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fastClientPubKey !== "") {
      writer.uint32(10).string(message.fastClientPubKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fastClientPubKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientRequest {
    return { fastClientPubKey: isSet(object.fastClientPubKey) ? globalThis.String(object.fastClientPubKey) : "" };
  },

  toJSON(message: QueryFastClientRequest): unknown {
    const obj: any = {};
    if (message.fastClientPubKey !== "") {
      obj.fastClientPubKey = message.fastClientPubKey;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientRequest>): QueryFastClientRequest {
    return QueryFastClientRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientRequest>): QueryFastClientRequest {
    const message = createBaseQueryFastClientRequest();
    message.fastClientPubKey = object.fastClientPubKey ?? "";
    return message;
  },
};

function createBaseQueryFastClientResponse(): QueryFastClientResponse {
  return { client: undefined };
}

export const QueryFastClientResponse = {
  encode(message: QueryFastClientResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.client !== undefined) {
      FastClient.encode(message.client, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.client = FastClient.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientResponse {
    return { client: isSet(object.client) ? FastClient.fromJSON(object.client) : undefined };
  },

  toJSON(message: QueryFastClientResponse): unknown {
    const obj: any = {};
    if (message.client !== undefined) {
      obj.client = FastClient.toJSON(message.client);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientResponse>): QueryFastClientResponse {
    return QueryFastClientResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientResponse>): QueryFastClientResponse {
    const message = createBaseQueryFastClientResponse();
    message.client = (object.client !== undefined && object.client !== null)
      ? FastClient.fromPartial(object.client)
      : undefined;
    return message;
  },
};

function createBaseQueryFastClientTransferRequest(): QueryFastClientTransferRequest {
  return { fastClientPubKey: "" };
}

export const QueryFastClientTransferRequest = {
  encode(message: QueryFastClientTransferRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fastClientPubKey !== "") {
      writer.uint32(10).string(message.fastClientPubKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientTransferRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientTransferRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fastClientPubKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientTransferRequest {
    return { fastClientPubKey: isSet(object.fastClientPubKey) ? globalThis.String(object.fastClientPubKey) : "" };
  },

  toJSON(message: QueryFastClientTransferRequest): unknown {
    const obj: any = {};
    if (message.fastClientPubKey !== "") {
      obj.fastClientPubKey = message.fastClientPubKey;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientTransferRequest>): QueryFastClientTransferRequest {
    return QueryFastClientTransferRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientTransferRequest>): QueryFastClientTransferRequest {
    const message = createBaseQueryFastClientTransferRequest();
    message.fastClientPubKey = object.fastClientPubKey ?? "";
    return message;
  },
};

function createBaseQueryFastClientTransferResponse(): QueryFastClientTransferResponse {
  return { newOwnerAddress: "" };
}

export const QueryFastClientTransferResponse = {
  encode(message: QueryFastClientTransferResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.newOwnerAddress !== "") {
      writer.uint32(10).string(message.newOwnerAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientTransferResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newOwnerAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientTransferResponse {
    return { newOwnerAddress: isSet(object.newOwnerAddress) ? globalThis.String(object.newOwnerAddress) : "" };
  },

  toJSON(message: QueryFastClientTransferResponse): unknown {
    const obj: any = {};
    if (message.newOwnerAddress !== "") {
      obj.newOwnerAddress = message.newOwnerAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientTransferResponse>): QueryFastClientTransferResponse {
    return QueryFastClientTransferResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientTransferResponse>): QueryFastClientTransferResponse {
    const message = createBaseQueryFastClientTransferResponse();
    message.newOwnerAddress = object.newOwnerAddress ?? "";
    return message;
  },
};

function createBaseQueryFastClientUsersRequest(): QueryFastClientUsersRequest {
  return { fastClientPubKey: "", pagination: undefined };
}

export const QueryFastClientUsersRequest = {
  encode(message: QueryFastClientUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fastClientPubKey !== "") {
      writer.uint32(10).string(message.fastClientPubKey);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fastClientPubKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientUsersRequest {
    return {
      fastClientPubKey: isSet(object.fastClientPubKey) ? globalThis.String(object.fastClientPubKey) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryFastClientUsersRequest): unknown {
    const obj: any = {};
    if (message.fastClientPubKey !== "") {
      obj.fastClientPubKey = message.fastClientPubKey;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientUsersRequest>): QueryFastClientUsersRequest {
    return QueryFastClientUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientUsersRequest>): QueryFastClientUsersRequest {
    const message = createBaseQueryFastClientUsersRequest();
    message.fastClientPubKey = object.fastClientPubKey ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryFastClientUsersResponse(): QueryFastClientUsersResponse {
  return { users: [], pagination: undefined };
}

export const QueryFastClientUsersResponse = {
  encode(message: QueryFastClientUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.users) {
      FastUser.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.users.push(FastUser.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => FastUser.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryFastClientUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => FastUser.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientUsersResponse>): QueryFastClientUsersResponse {
    return QueryFastClientUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientUsersResponse>): QueryFastClientUsersResponse {
    const message = createBaseQueryFastClientUsersResponse();
    message.users = object.users?.map((e) => FastUser.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryFastClientUserRequest(): QueryFastClientUserRequest {
  return { fastClientPubKey: "", userId: "" };
}

export const QueryFastClientUserRequest = {
  encode(message: QueryFastClientUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fastClientPubKey !== "") {
      writer.uint32(10).string(message.fastClientPubKey);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fastClientPubKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientUserRequest {
    return {
      fastClientPubKey: isSet(object.fastClientPubKey) ? globalThis.String(object.fastClientPubKey) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: QueryFastClientUserRequest): unknown {
    const obj: any = {};
    if (message.fastClientPubKey !== "") {
      obj.fastClientPubKey = message.fastClientPubKey;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientUserRequest>): QueryFastClientUserRequest {
    return QueryFastClientUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientUserRequest>): QueryFastClientUserRequest {
    const message = createBaseQueryFastClientUserRequest();
    message.fastClientPubKey = object.fastClientPubKey ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseQueryFastClientUserResponse(): QueryFastClientUserResponse {
  return { user: undefined };
}

export const QueryFastClientUserResponse = {
  encode(message: QueryFastClientUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      FastUser.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = FastUser.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientUserResponse {
    return { user: isSet(object.user) ? FastUser.fromJSON(object.user) : undefined };
  },

  toJSON(message: QueryFastClientUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = FastUser.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientUserResponse>): QueryFastClientUserResponse {
    return QueryFastClientUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientUserResponse>): QueryFastClientUserResponse {
    const message = createBaseQueryFastClientUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? FastUser.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseQueryFastClientEligibilityRequest(): QueryFastClientEligibilityRequest {
  return { payload: "" };
}

export const QueryFastClientEligibilityRequest = {
  encode(message: QueryFastClientEligibilityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.payload !== "") {
      writer.uint32(10).string(message.payload);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientEligibilityRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientEligibilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payload = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientEligibilityRequest {
    return { payload: isSet(object.payload) ? globalThis.String(object.payload) : "" };
  },

  toJSON(message: QueryFastClientEligibilityRequest): unknown {
    const obj: any = {};
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientEligibilityRequest>): QueryFastClientEligibilityRequest {
    return QueryFastClientEligibilityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientEligibilityRequest>): QueryFastClientEligibilityRequest {
    const message = createBaseQueryFastClientEligibilityRequest();
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseQueryFastClientEligibilityResponse(): QueryFastClientEligibilityResponse {
  return { eligible: false, userCredits: "", blockHeight: 0n };
}

export const QueryFastClientEligibilityResponse = {
  encode(message: QueryFastClientEligibilityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eligible !== false) {
      writer.uint32(8).bool(message.eligible);
    }
    if (message.userCredits !== "") {
      writer.uint32(18).string(message.userCredits);
    }
    if (message.blockHeight !== 0n) {
      if (BigInt.asUintN(64, message.blockHeight) !== message.blockHeight) {
        throw new globalThis.Error("value provided for field message.blockHeight of type uint64 too large");
      }
      writer.uint32(24).uint64(message.blockHeight.toString());
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryFastClientEligibilityResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFastClientEligibilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.eligible = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userCredits = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockHeight = longToBigint(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFastClientEligibilityResponse {
    return {
      eligible: isSet(object.eligible) ? globalThis.Boolean(object.eligible) : false,
      userCredits: isSet(object.userCredits) ? globalThis.String(object.userCredits) : "",
      blockHeight: isSet(object.blockHeight) ? BigInt(object.blockHeight) : 0n,
    };
  },

  toJSON(message: QueryFastClientEligibilityResponse): unknown {
    const obj: any = {};
    if (message.eligible !== false) {
      obj.eligible = message.eligible;
    }
    if (message.userCredits !== "") {
      obj.userCredits = message.userCredits;
    }
    if (message.blockHeight !== 0n) {
      obj.blockHeight = message.blockHeight.toString();
    }
    return obj;
  },

  create(base?: DeepPartial<QueryFastClientEligibilityResponse>): QueryFastClientEligibilityResponse {
    return QueryFastClientEligibilityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryFastClientEligibilityResponse>): QueryFastClientEligibilityResponse {
    const message = createBaseQueryFastClientEligibilityResponse();
    message.eligible = object.eligible ?? false;
    message.userCredits = object.userCredits ?? "";
    message.blockHeight = object.blockHeight ?? 0n;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /**
   * FastClient returns a fast client when given its public key as a hex
   * encoded string.
   */
  FastClient(request: QueryFastClientRequest): Promise<QueryFastClientResponse>;
  /**
   * FastClientTransfer returns a fast client transfer when given its public key
   * as a hex encoded string.
   */
  FastClientTransfer(request: QueryFastClientTransferRequest): Promise<QueryFastClientTransferResponse>;
  /**
   * FastUsers returns a paginated list of Fast users when given the fast client
   * public key as a hex encoded string.
   */
  FastClientUsers(request: QueryFastClientUsersRequest): Promise<QueryFastClientUsersResponse>;
  /**
   * FastUser returns a fast user when given its public key as a hex
   * encoded string.
   */
  FastClientUser(request: QueryFastClientUserRequest): Promise<QueryFastClientUserResponse>;
  /**
   * FastClientEligibility returns a fast client's eligibility based on a signed
   * payload.
   */
  FastClientEligibility(request: QueryFastClientEligibilityRequest): Promise<QueryFastClientEligibilityResponse>;
  /** Params returns the total set of fast parameters. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}

export const QueryServiceName = "sedachain.fast.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.FastClient = this.FastClient.bind(this);
    this.FastClientTransfer = this.FastClientTransfer.bind(this);
    this.FastClientUsers = this.FastClientUsers.bind(this);
    this.FastClientUser = this.FastClientUser.bind(this);
    this.FastClientEligibility = this.FastClientEligibility.bind(this);
    this.Params = this.Params.bind(this);
  }
  FastClient(request: QueryFastClientRequest): Promise<QueryFastClientResponse> {
    const data = QueryFastClientRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FastClient", data);
    return promise.then((data) => QueryFastClientResponse.decode(_m0.Reader.create(data)));
  }

  FastClientTransfer(request: QueryFastClientTransferRequest): Promise<QueryFastClientTransferResponse> {
    const data = QueryFastClientTransferRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FastClientTransfer", data);
    return promise.then((data) => QueryFastClientTransferResponse.decode(_m0.Reader.create(data)));
  }

  FastClientUsers(request: QueryFastClientUsersRequest): Promise<QueryFastClientUsersResponse> {
    const data = QueryFastClientUsersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FastClientUsers", data);
    return promise.then((data) => QueryFastClientUsersResponse.decode(_m0.Reader.create(data)));
  }

  FastClientUser(request: QueryFastClientUserRequest): Promise<QueryFastClientUserResponse> {
    const data = QueryFastClientUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FastClientUser", data);
    return promise.then((data) => QueryFastClientUserResponse.decode(_m0.Reader.create(data)));
  }

  FastClientEligibility(request: QueryFastClientEligibilityRequest): Promise<QueryFastClientEligibilityResponse> {
    const data = QueryFastClientEligibilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FastClientEligibility", data);
    return promise.then((data) => QueryFastClientEligibilityResponse.decode(_m0.Reader.create(data)));
  }

  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
