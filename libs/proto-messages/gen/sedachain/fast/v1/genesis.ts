// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/fast/v1/genesis.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { FastClient, FastUser, Params } from "./fast";

/** GenesisState defines fast module's genesis state. */
export interface GenesisState {
  startingFastClientId: bigint;
  params: Params | undefined;
  fastClients: FastClient[];
  fastUsers: UserWithFastClientId[];
  transfers: FastClientTransferOwnership[];
}

/** FastUser wraps a user and their associated FastClient id. */
export interface UserWithFastClientId {
  fastClientId: bigint;
  user: FastUser | undefined;
}

/** FastClientTransferOwnership links a fast client to a new owner address. */
export interface FastClientTransferOwnership {
  fastClientId: bigint;
  newOwnerAddress: string;
}

function createBaseGenesisState(): GenesisState {
  return { startingFastClientId: 0n, params: undefined, fastClients: [], fastUsers: [], transfers: [] };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.startingFastClientId !== 0n) {
      if (BigInt.asUintN(64, message.startingFastClientId) !== message.startingFastClientId) {
        throw new globalThis.Error("value provided for field message.startingFastClientId of type uint64 too large");
      }
      writer.uint32(8).uint64(message.startingFastClientId.toString());
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.fastClients) {
      FastClient.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.fastUsers) {
      UserWithFastClientId.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.transfers) {
      FastClientTransferOwnership.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startingFastClientId = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fastClients.push(FastClient.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fastUsers.push(UserWithFastClientId.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.transfers.push(FastClientTransferOwnership.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      startingFastClientId: isSet(object.startingFastClientId) ? BigInt(object.startingFastClientId) : 0n,
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      fastClients: globalThis.Array.isArray(object?.fastClients)
        ? object.fastClients.map((e: any) => FastClient.fromJSON(e))
        : [],
      fastUsers: globalThis.Array.isArray(object?.fastUsers)
        ? object.fastUsers.map((e: any) => UserWithFastClientId.fromJSON(e))
        : [],
      transfers: globalThis.Array.isArray(object?.transfers)
        ? object.transfers.map((e: any) => FastClientTransferOwnership.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.startingFastClientId !== 0n) {
      obj.startingFastClientId = message.startingFastClientId.toString();
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.fastClients?.length) {
      obj.fastClients = message.fastClients.map((e) => FastClient.toJSON(e));
    }
    if (message.fastUsers?.length) {
      obj.fastUsers = message.fastUsers.map((e) => UserWithFastClientId.toJSON(e));
    }
    if (message.transfers?.length) {
      obj.transfers = message.transfers.map((e) => FastClientTransferOwnership.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.startingFastClientId = object.startingFastClientId ?? 0n;
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.fastClients = object.fastClients?.map((e) => FastClient.fromPartial(e)) || [];
    message.fastUsers = object.fastUsers?.map((e) => UserWithFastClientId.fromPartial(e)) || [];
    message.transfers = object.transfers?.map((e) => FastClientTransferOwnership.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserWithFastClientId(): UserWithFastClientId {
  return { fastClientId: 0n, user: undefined };
}

export const UserWithFastClientId = {
  encode(message: UserWithFastClientId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fastClientId !== 0n) {
      if (BigInt.asUintN(64, message.fastClientId) !== message.fastClientId) {
        throw new globalThis.Error("value provided for field message.fastClientId of type uint64 too large");
      }
      writer.uint32(8).uint64(message.fastClientId.toString());
    }
    if (message.user !== undefined) {
      FastUser.encode(message.user, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserWithFastClientId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserWithFastClientId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fastClientId = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = FastUser.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserWithFastClientId {
    return {
      fastClientId: isSet(object.fastClientId) ? BigInt(object.fastClientId) : 0n,
      user: isSet(object.user) ? FastUser.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: UserWithFastClientId): unknown {
    const obj: any = {};
    if (message.fastClientId !== 0n) {
      obj.fastClientId = message.fastClientId.toString();
    }
    if (message.user !== undefined) {
      obj.user = FastUser.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<UserWithFastClientId>): UserWithFastClientId {
    return UserWithFastClientId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserWithFastClientId>): UserWithFastClientId {
    const message = createBaseUserWithFastClientId();
    message.fastClientId = object.fastClientId ?? 0n;
    message.user = (object.user !== undefined && object.user !== null) ? FastUser.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseFastClientTransferOwnership(): FastClientTransferOwnership {
  return { fastClientId: 0n, newOwnerAddress: "" };
}

export const FastClientTransferOwnership = {
  encode(message: FastClientTransferOwnership, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fastClientId !== 0n) {
      if (BigInt.asUintN(64, message.fastClientId) !== message.fastClientId) {
        throw new globalThis.Error("value provided for field message.fastClientId of type uint64 too large");
      }
      writer.uint32(8).uint64(message.fastClientId.toString());
    }
    if (message.newOwnerAddress !== "") {
      writer.uint32(18).string(message.newOwnerAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FastClientTransferOwnership {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFastClientTransferOwnership();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fastClientId = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newOwnerAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FastClientTransferOwnership {
    return {
      fastClientId: isSet(object.fastClientId) ? BigInt(object.fastClientId) : 0n,
      newOwnerAddress: isSet(object.newOwnerAddress) ? globalThis.String(object.newOwnerAddress) : "",
    };
  },

  toJSON(message: FastClientTransferOwnership): unknown {
    const obj: any = {};
    if (message.fastClientId !== 0n) {
      obj.fastClientId = message.fastClientId.toString();
    }
    if (message.newOwnerAddress !== "") {
      obj.newOwnerAddress = message.newOwnerAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<FastClientTransferOwnership>): FastClientTransferOwnership {
    return FastClientTransferOwnership.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FastClientTransferOwnership>): FastClientTransferOwnership {
    const message = createBaseFastClientTransferOwnership();
    message.fastClientId = object.fastClientId ?? 0n;
    message.newOwnerAddress = object.newOwnerAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
