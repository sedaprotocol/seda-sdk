// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/app/v1/query.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

/**
 * QuerySEDASignerStatusRequest is request type for the Query/SEDASignerStatus
 * RPC method.
 */
export interface QuerySEDASignerStatusRequest {
}

/**
 * QuerySEDASignerStatusResponse is response type for the Query/SEDASignerStatus
 * RPC method.
 */
export interface QuerySEDASignerStatusResponse {
  /** ValidatorAddress is the address of the validator loaded in the signer. */
  validatorAddress: string;
  /** SignerKeys is the list of keys loaded in the SEDA signer. */
  signerKeys: SignerKey[];
}

/** SignerKey is a key loaded in the SEDA signer. */
export interface SignerKey {
  /** Index is the index of the SEDA key. */
  index: number;
  /** IndexName is the name of the SEDA key. */
  indexName: string;
  /** IsProvingSchemeActive indicates whether the given SEDA key index is active. */
  isProvingSchemeActive: boolean;
  /**
   * PublicKey is the hex-encoded public key of the key loaded in
   * the SEDA signer.
   */
  publicKey: string;
  /**
   * IsSynced indicates whether the keys loaded in the SEDA signer match
   * the keys registered in the pubkey module.
   */
  isSynced: boolean;
}

function createBaseQuerySEDASignerStatusRequest(): QuerySEDASignerStatusRequest {
  return {};
}

export const QuerySEDASignerStatusRequest = {
  encode(_: QuerySEDASignerStatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuerySEDASignerStatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySEDASignerStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QuerySEDASignerStatusRequest {
    return {};
  },

  toJSON(_: QuerySEDASignerStatusRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QuerySEDASignerStatusRequest>): QuerySEDASignerStatusRequest {
    return QuerySEDASignerStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QuerySEDASignerStatusRequest>): QuerySEDASignerStatusRequest {
    const message = createBaseQuerySEDASignerStatusRequest();
    return message;
  },
};

function createBaseQuerySEDASignerStatusResponse(): QuerySEDASignerStatusResponse {
  return { validatorAddress: "", signerKeys: [] };
}

export const QuerySEDASignerStatusResponse = {
  encode(message: QuerySEDASignerStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorAddress !== "") {
      writer.uint32(10).string(message.validatorAddress);
    }
    for (const v of message.signerKeys) {
      SignerKey.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuerySEDASignerStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySEDASignerStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signerKeys.push(SignerKey.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySEDASignerStatusResponse {
    return {
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
      signerKeys: globalThis.Array.isArray(object?.signerKeys)
        ? object.signerKeys.map((e: any) => SignerKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QuerySEDASignerStatusResponse): unknown {
    const obj: any = {};
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.signerKeys?.length) {
      obj.signerKeys = message.signerKeys.map((e) => SignerKey.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QuerySEDASignerStatusResponse>): QuerySEDASignerStatusResponse {
    return QuerySEDASignerStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuerySEDASignerStatusResponse>): QuerySEDASignerStatusResponse {
    const message = createBaseQuerySEDASignerStatusResponse();
    message.validatorAddress = object.validatorAddress ?? "";
    message.signerKeys = object.signerKeys?.map((e) => SignerKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSignerKey(): SignerKey {
  return { index: 0, indexName: "", isProvingSchemeActive: false, publicKey: "", isSynced: false };
}

export const SignerKey = {
  encode(message: SignerKey, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.indexName !== "") {
      writer.uint32(18).string(message.indexName);
    }
    if (message.isProvingSchemeActive !== false) {
      writer.uint32(24).bool(message.isProvingSchemeActive);
    }
    if (message.publicKey !== "") {
      writer.uint32(34).string(message.publicKey);
    }
    if (message.isSynced !== false) {
      writer.uint32(40).bool(message.isSynced);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignerKey {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignerKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.indexName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isProvingSchemeActive = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isSynced = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignerKey {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
      isProvingSchemeActive: isSet(object.isProvingSchemeActive)
        ? globalThis.Boolean(object.isProvingSchemeActive)
        : false,
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      isSynced: isSet(object.isSynced) ? globalThis.Boolean(object.isSynced) : false,
    };
  },

  toJSON(message: SignerKey): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.indexName !== "") {
      obj.indexName = message.indexName;
    }
    if (message.isProvingSchemeActive !== false) {
      obj.isProvingSchemeActive = message.isProvingSchemeActive;
    }
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.isSynced !== false) {
      obj.isSynced = message.isSynced;
    }
    return obj;
  },

  create(base?: DeepPartial<SignerKey>): SignerKey {
    return SignerKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignerKey>): SignerKey {
    const message = createBaseSignerKey();
    message.index = object.index ?? 0;
    message.indexName = object.indexName ?? "";
    message.isProvingSchemeActive = object.isProvingSchemeActive ?? false;
    message.publicKey = object.publicKey ?? "";
    message.isSynced = object.isSynced ?? false;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** SEDASignerStatus returns the status of the node's SEDA signer. */
  SEDASignerStatus(request: QuerySEDASignerStatusRequest): Promise<QuerySEDASignerStatusResponse>;
}

export const QueryServiceName = "sedachain.app.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.SEDASignerStatus = this.SEDASignerStatus.bind(this);
  }
  SEDASignerStatus(request: QuerySEDASignerStatusRequest): Promise<QuerySEDASignerStatusResponse> {
    const data = QuerySEDASignerStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SEDASignerStatus", data);
    return promise.then((data) => QuerySEDASignerStatusResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
